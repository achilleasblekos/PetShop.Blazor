@page "/employeelist/edit/{Id:int?}"
@using PetShop.Model
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>EmployeeEdit</h3>

@if (EmployeeItem == null)
{
    <p>Loading ...</p>
}
else
{
    <div class="row">
            <div class="col-md-6">
            <label class="form-label">Name</label>
            <input class="form-control" @bind="@EmployeeItem.Name" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Surname</label>
            <input class="form-control" @bind="@EmployeeItem.Surname" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Employee Type</label>
            <input class="form-control" @bind="@EmployeeItem.EmployeeType" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Monthly Salary</label>
            <input class="form-control" @bind="@EmployeeItem.SallaryPerMonth" />
        </div>
        <div class="col-md-6">
            <label class="form-label">Transactions</label>
            
        </div>
    </div>
    <div class="row mt-2">
        <div class="col">
            <button class="btn btn-success" @onclick="OnSave">Save</button>
            <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
        </div>
    </div>
}
@code {
    [Parameter] public int? ID { get; set; }
    EmployeeEditViewModel EmployeeItem { get; set; }
    List<EmployeeListViewModel> employees = new();

    private async Task LoadItemsFromServer() {
        employees = await httpClient.GetFromJsonAsync<List<EmployeeListViewModel>>("employee"); 
    }

    protected override async Task OnInitializedAsync()
    {
        EmployeeItem = await httpClient.GetFromJsonAsync<EmployeeEditViewModel>($"employee/{(ID == null ? 0 : ID)}");// maybe no need to load from server again, already got all employees, just search for the id
    }

    protected async Task OnSave()
    {
        HttpResponseMessage response;

        if (GetEmployeeCount(EmployeeType.Manager, employees) < 1) {
            if (ID == null)
            {
                response = await httpClient.PostAsJsonAsync("employee", EmployeeItem);
            }
            else
            {
                response = await httpClient.PutAsJsonAsync("employee", EmployeeItem);
            }
            response.EnsureSuccessStatusCode();
            navigationManager.NavigateTo("employeelist");
        }
        else {
            throw new ArgumentException("Canet add more than 1 managers");
        }
    }

    protected void OnCancel()
    {
        navigationManager.NavigateTo("employeelist");
    }

    int GetEmployeeCount(EmployeeType type, List<EmployeeListViewModel> _employees) { //count employees of a type
    int employeeCount = 0;
    for (int i = 0; i < _employees.Count; i++) {
        if (employees[i].EmployeeType == type) {
            employeeCount++;
            i++;
        }
    } return employeeCount; }
}

